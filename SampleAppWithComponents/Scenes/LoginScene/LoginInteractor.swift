//
//  LoginInteractor.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 20/09/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Validator

protocol LoginBusinessLogic{
    func doSomething(request: Login.Something.Request)
    func requiredUIForScreen(request: Login.UI.Request)
    func validate(request : Login.Validate.Request)
}

protocol LoginDataStore
{
    //var name: String { get set }
}


class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var validationWorker : ValidationWorker = ValidationWorker()

    //var name: String = ""
    
    var validationResultEmail : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultNameOfSubject : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultGender : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultContact : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultReligion : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultLiving : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultEducation : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultMarialStatus : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultOccupation : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])

    // MARK: Do something
    
    func doSomething(request: Login.Something.Request){
        worker = LoginWorker()
        worker?.doSomeWork()
        
        let response = Login.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func requiredUIForScreen(request: Login.UI.Request){
        
        let uiComponenets = [
            Login.UIComponents.ocuupation,
            Login.UIComponents.signInbutton,
            Login.UIComponents.age,
            Login.UIComponents.recentSuguar,
            Login.UIComponents.multiTextField,
                             Login.UIComponents.nameOfSubject,
                             Login.UIComponents.gender,
                             Login.UIComponents.contact,
                             Login.UIComponents.religion,
                             Login.UIComponents.livingArrangement,
                             Login.UIComponents.educationStatus,
                             Login.UIComponents.martialStatus
                             
                             ]
        
        let response = Login.UI.Response(uiComponenets: uiComponenets)
        presenter?.presentUI(response: response)
    }
    
    func validate(request : Login.Validate.Request){
        var nosResult, genderResult,contactResult : ValidationResult?
        var religionResult, livingResult, educationResult : ValidationResult?
        var maritailResult, occupationResult: ValidationResult?

        if let email = request.nameOfSubject{
            validationResultNameOfSubject = validationWorker.validateIsEmpty(email: email)
            nosResult =  validationResultNameOfSubject
        }
        
        if let gender = request.gender{
            validationResultGender = validationWorker.validateIsEmpty(email: gender)
            genderResult =  validationResultGender
        }
        
        if let contact = request.contact{
            validationResultContact = validationWorker.validateIsEmpty(email: contact)
            contactResult =  validationResultContact
        }
        
        if let religion = request.religion{
            validationResultReligion = validationWorker.validateIsEmpty(email: religion)
            religionResult =  validationResultReligion
        }
        
        if let value = request.livingArrangement{
            validationResultLiving = validationWorker.validateIsEmpty(email: value)
            livingResult =  validationResultLiving
        }
        
        if let value = request.educationStatus{
            validationResultEducation = validationWorker.validateIsEmpty(email: value)
            educationResult =  validationResultEducation

        }
        
        if let value = request.martialStatus{
            validationResultMarialStatus = validationWorker.validateIsEmpty(email: value)
            maritailResult =  validationResultMarialStatus
        }
        
        if let value = request.occupation{
            validationResultOccupation = validationWorker.validateIsEmpty(email: value)
            occupationResult =  validationResultOccupation
        }
            
        let response = Login.Validate.Response(validationResultNameOfSubject: nosResult, validationResultGender: genderResult, validationResultContact: contactResult, validationResultReligion: religionResult, validationResultLiving: livingResult, validationResultEducation: educationResult, validationResultMaritialStatus: maritailResult, validationResultOccupation: occupationResult)
        presenter?.presentValidationResult(response: response)
    }
}
