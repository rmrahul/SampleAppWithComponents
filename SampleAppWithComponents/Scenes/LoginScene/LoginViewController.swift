//
//  LoginViewController.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 20/09/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol LoginDisplayLogic: class{
    func displaySomething(viewModel: Login.Something.ViewModel)
    func displayUI(viewModel: Login.UI.ViewModel)
    func displayValidationErrors(viewModel : Login.Validate.ViewModel)

}

class LoginViewController: UIViewController, LoginDisplayLogic, UITableViewDataSource, UITableViewDelegate, LabelTableViewCellDelegate,NVActivityIndicatorViewable{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var tableview: UITableView!
    private var cellConfigs : [(uiComponent : Login.UIComponents,config: BaseCellConfig)]?
    private var txtEmail : RMTextfieldView?
    private var txtPassword : RMTextfieldView?
    
    
    
    private var emailCell : TextfieldTableViewCell?
    private var nameOfSubjectCell : TextfieldTableViewCell?
    private var genderCell : RadioBoxGroupTableViewCell?
    private var contactCell : TextfieldTableViewCell?
    private var religionCell : RadioBoxGroupTableViewCell?
    private var livingCell : RadioBoxGroupTableViewCell?
    private var educationCell : RadioBoxGroupTableViewCell?
    private var maritialStatusCell : RadioBoxGroupTableViewCell?
    private var occupationCell : RadioBoxGroupTableViewCell?
    private var ageCell : StepperTableViewCell?

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.hideNavigationBar()
        
        //txtEmail?.setText(text: "soni.raju+3@perennialsys.com")//"patient1@gmail.com")//"rajashree.kamble+20@perennialsys.com")//"anjutai.gomase+787@perennialsys.com")//"soni.raju+3@perennialsys.com")//"ui@ui.com")//"demodoctor80@gmail.com")//"op@op.com")//"rahulmane10@gmail.com")
        //txtPassword?.setText(text: "Test1234")//"Anjali@1234")//"password")
        
        addObserverForLangaugeChange()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    override func viewDidLoad(){
        super.viewDidLoad()
        doSomething()
        setUpUI()
    }
    
    //MARK: Setup
    func setUpUI(){
        hideKeyboardWhenTappedAround()
        registerNibs()
        addBackground(imageName: "signInBG")
        self.tableview.backgroundColor = UIColor.clear
        view.bringSubviewToFront(tableview)
        askForUI()
        
        
    }
    
    func registerNibs(){
        tableview.register(UINib(nibName: "MultiTextfieldsTableViewCell", bundle: nil), forCellReuseIdentifier: "multiTextfieldCell")
        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "nameOfSubjectCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "genderCell")
        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "contactCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "religionCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "livingCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "educationCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "martialStatusCell")
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "occupationCell")
        tableview.register(UINib(nibName: "StepperTableViewCell", bundle: nil), forCellReuseIdentifier: "ageCell")

        tableview.register(UINib(nibName: "BloodSugarTableViewCell", bundle: nil), forCellReuseIdentifier: "sugarCell")

        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "radioCell")

        
        tableview.register(UINib(nibName: "MultiTextfieldsTableViewCell", bundle: nil), forCellReuseIdentifier: "multiSelectCell")

        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "emailCell")
        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "passwordCell")
        tableview.register(UINib(nibName: "ImageTableViewCell", bundle: nil), forCellReuseIdentifier: "iconCell")
        tableview.register(UINib(nibName: "LabelTableViewCell", bundle: nil), forCellReuseIdentifier: "forgotCell")
        tableview.register(UINib(nibName: "ButtonTableViewCell", bundle: nil), forCellReuseIdentifier: "signInCell")
        tableview.register(UINib(nibName: "ButtonTableViewCell", bundle: nil), forCellReuseIdentifier: "socialCell")
        tableview.rowHeight = UITableView.automaticDimension
        tableview.estimatedRowHeight = 140
        
    }
    
    func askUIForFacebookLogin(){
//        let request = Login.SocialMedia.Request(type: Login.SocialMedia.MediaType.Facebook, gmailProfile: nil)
//        interactor?.didSelectSocialMedia(request: request)
    }
    
    // MARK: Presentor command
    func doSomething(){
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func addObserverForLangaugeChange(){
        NotificationCenter.default.addObserver(self, selector: #selector(self.languageDidChange(notification:)), name: NSNotification.Name.init("languageDidChange"), object: nil)
    }
    
    @objc func languageDidChange(notification: Notification){
        askForUI()
    }
    
    func askForUI(){
        let request = Login.UI.Request()
        interactor?.requiredUIForScreen(request: request)
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel){
    }
    
    func displayUI(viewModel: Login.UI.ViewModel) {
        cellConfigs = viewModel.cellConfigs
        tableview.reloadData()
    }
    
    func displayValidationErrors(viewModel: Login.Validate.ViewModel) {
        stopAnimating()
        
        if let nosError = viewModel.errorMessageForNameOfSubject {
            //txtEmail?.showError(str: emailError)
            self.nameOfSubjectCell?.showError(str: nosError)
        }

        if let nosError = viewModel.errorMessageForGender {
            self.genderCell?.showError(error: nosError)
        }
        
        if let contactError = viewModel.errorMessageForContact {
            self.contactCell?.showError(str: contactError)
        }
        
        if let error = viewModel.errorMessageForReligion {
            self.religionCell?.showError(error: error)
        }
        
        if let error = viewModel.errorMessageForLiving {
            self.livingCell?.showError(error: error)
        }
        
        if let error = viewModel.errorMessageForEducation {
            self.educationCell?.showError(error: error)
        }
        
        if let error = viewModel.errorMessageForMaritialStatus {
            self.maritialStatusCell?.showError(error: error)
        }
        
        if let error = viewModel.errorMessageForOccupation {
            self.occupationCell?.showError(error: error)
        }
        
        tableview.refresh()
    }
    
    
    //MARK: Tableview source
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return cellConfigs?.count ?? 0 //viewmoDel.getNumberOfRows()
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        guard let cellDetails = cellConfigs?[indexPath.row]  else {
            return UITableViewCell()
        }
        
        switch cellDetails.uiComponent {
        case .icon :
            let cell = tableView.dequeueReusableCell(withIdentifier: "iconCell", for: indexPath) as! ImageTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? ImageTableViewCellConfig)
            return cell
        case .signInOption: fallthrough
        case .signUpOption: fallthrough
        case .forgotpassword:
            let cell = tableView.dequeueReusableCell(withIdentifier: "forgotCell", for: indexPath) as! LabelTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? LabelTableViewCellConfig)
            //cell.delegate = self
            
            return cell
        case .email :
            let cell = tableView.dequeueReusableCell(withIdentifier: "emailCell", for: indexPath) as! TextfieldTableViewCell
            self.emailCell = cell
            
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            txtEmail = cell.textfield
            txtEmail?.textfield.addTarget(self, action: #selector(self.emailDidBegin), for: .editingDidBegin)
            txtEmail?.textfield.addTarget(self, action: #selector(self.emailDidChange), for: .editingChanged)
            txtEmail?.textfield.addTarget(self, action: #selector(self.emailDidEnd), for: .editingDidEnd)
            return cell
        case .password :
            let cell = tableView.dequeueReusableCell(withIdentifier: "passwordCell", for: indexPath) as! TextfieldTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            txtPassword = cell.textfield
            
            txtPassword?.textfield.isSecureTextEntry = true
            
            let button = txtPassword?.addRightButton(image: UIImage(named: "showPassword")!, selecteImage: UIImage(named : "hidePassword")!)
            button?.addTarget(self, action: #selector(self.showPassword), for: .touchDown)
            
            txtPassword?.textfield.addTarget(self, action: #selector(self.passwordDidBegin), for: .editingDidBegin)
            txtPassword?.textfield.addTarget(self, action: #selector(self.passwordDidChange), for: .editingChanged)
            txtPassword?.textfield.addTarget(self, action: #selector(self.passwordDidEnd), for: .editingDidEnd)
            return cell
        case .socialMedia:
            let cell = tableView.dequeueReusableCell(withIdentifier: "socialCell", for: indexPath) as! ButtonTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? ButtonTableViewCellConfig)
            cell.button.addTarget(self, action: #selector(self.didTappedOnGmail(button:)), for: UIControl.Event.touchDown);
            cell.buttonSecondary.addTarget(self, action: #selector(self.didTappedOnFacebook(button:)), for: UIControl.Event.touchDown);
            
            return cell
        case .signInbutton:
            let cell = tableView.dequeueReusableCell(withIdentifier: "signInCell", for: indexPath) as! ButtonTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? ButtonTableViewCellConfig)
            cell.button.addTarget(self, action: #selector(self.didTapedOnSignInButton(button:)), for: UIControl.Event.touchDown);
            
            return cell
        case .multitextfields:
            
            let cell = tableView.dequeueReusableCell(withIdentifier: "multiSelectCell", for: indexPath) as! MultiTextfieldsTableViewCell            
            cell.configureCell(config: cellDetails.config as? MultiTextfieldsTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            return cell
        case .radioGroup:
            let cell = tableView.dequeueReusableCell(withIdentifier: "radioCell", for: indexPath) as! RadioBoxGroupTableViewCell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.backgroundColor = UIColor.clear
            return cell
        case .radioGroupOneColumn:
            let cell = tableView.dequeueReusableCell(withIdentifier: "radioCell", for: indexPath) as! RadioBoxGroupTableViewCell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.backgroundColor = UIColor.clear
            return cell
        case .radioGroupWithOthers:
            let cell = tableView.dequeueReusableCell(withIdentifier: "radioCell", for: indexPath) as! RadioBoxGroupTableViewCell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.backgroundColor = UIColor.clear
            return cell
            
            
            //Start from here
        case .multiTextField:
            let cell = tableView.dequeueReusableCell(withIdentifier: "multiTextfieldCell", for: indexPath) as! MultiTextfieldsTableViewCell
            cell.configureCell(config: cellDetails.config as? MultiTextfieldsTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            return cell
        case .nameOfSubject:
            let cell = tableView.dequeueReusableCell(withIdentifier: "nameOfSubjectCell", for: indexPath) as! TextfieldTableViewCell
            self.nameOfSubjectCell = cell
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            cell.textfield?.textfield.addTarget(self, action: #selector(self.nameOfSubjectDidChange), for: .editingChanged)
            return cell
        case .age:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ageCell", for: indexPath) as! StepperTableViewCell
            self.ageCell = cell
            cell.configureCell(config: cellDetails.config as? StepperTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.lightGray
            return cell
        case .gender:
            let cell = tableView.dequeueReusableCell(withIdentifier: "genderCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.genderCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .address:
            fallthrough
        case .contact:
            let cell = tableView.dequeueReusableCell(withIdentifier: "contactCell", for: indexPath) as! TextfieldTableViewCell
            self.contactCell = cell
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            cell.textfield?.textfield.addTarget(self, action: #selector(self.contactDidChange), for: .editingChanged)
            return cell
        case .religion:
            let cell = tableView.dequeueReusableCell(withIdentifier: "religionCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.religionCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .livingArrangement:
            let cell = tableView.dequeueReusableCell(withIdentifier: "livingCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.livingCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .familyMembers:
            fallthrough
        case .educationStatus:
            let cell = tableView.dequeueReusableCell(withIdentifier: "educationCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.educationCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .martialStatus:
            let cell = tableView.dequeueReusableCell(withIdentifier: "martialStatusCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.maritialStatusCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .ocuupation:
            let cell = tableView.dequeueReusableCell(withIdentifier: "occupationCell", for: indexPath) as! RadioBoxGroupTableViewCell
            self.occupationCell = cell
            cell.configureCell(config: cellDetails.config as? RadioBoxGroupTableViewCellConfig, indexPath: indexPath)
            cell.delegate = self
            cell.backgroundColor = UIColor.clear
            return cell
        case .montlyIncome:
            fallthrough
        case .digosed:
            fallthrough
        case .treatmentStarted:
            fallthrough
        case .placeOfTreatment:
            fallthrough
        case .typeOfMedication:
            fallthrough
        case .numberOfTablet:
            fallthrough
        case .dosageOfOralDrugs:
            fallthrough
        case .dosageOfInsulin:
            fallthrough
        case .recentSuguar:
            let cell = tableView.dequeueReusableCell(withIdentifier: "sugarCell", for: indexPath) as! BloodSugarTableViewCell
            cell.configureCell(config: cellDetails.config as? BloodSugarTableViewCellConfig, indexPath: indexPath)
            cell.backgroundColor = UIColor.clear
            return cell
        case .glycemicControl:
            fallthrough
        case .dibeticHistory:
            fallthrough
        case .coexistingIllness:
            return UITableViewCell()
        }
    }
    
    // MARK: Button Actions
    @objc func didTappedOnGmail(button : UIButton){
        
    }
    
    @objc func didTappedOnFacebook(button : UIButton){
        
    }
    
    @objc func emailDidBegin(textfield : UITextField){
        
    }
    
    @objc func emailDidChange(textfield : UITextField){
        let request = Login.Validate.Request(nameOfSubject: self.nameOfSubjectCell?.textfield.textfield.text)
        interactor?.validate(request: request)
    }
    
    @objc func emailDidEnd(textfield : UITextField){
    }

    @objc func nameOfSubjectDidChange(textfield : UITextField){
        let request = Login.Validate.Request(nameOfSubject: self.nameOfSubjectCell?.textfield.textfield.text)
        interactor?.validate(request: request)
    }
    
    @objc func contactDidChange(textfield : UITextField){
        let request = Login.Validate.Request(contact: self.contactCell?.textfield.textfield.text)
        interactor?.validate(request: request)
    }
    
    //password
    @objc func passwordDidBegin(textfield : UITextField){
        
    }
    
    @objc func passwordDidChange(textfield : UITextField){
//        let request = Login.Validate.Request(email: nil, password: textfield.text)
//        interactor?.validate(request: request)
    }
    
    @objc func passwordDidEnd(textfield : UITextField){
        
    }
    
    @objc func showPassword(_ button : UIButton){
        button.isSelected = !button.isSelected
        txtPassword?.textfield.isSecureTextEntry = !(txtPassword?.textfield.isSecureTextEntry)!
    }
    
    //MARK: Label delegate
    func didSelectLinkWith(url: URL!) {
        // pass it to interactor to take decision
//        let request = Login.Link.Request(selectedURL: url)
//        interactor?.didSelectLink(request: request)
    }
    
    
    @objc func didTapedOnSignInButton(button : UIButton){
        let request = Login.Validate.Request(nameOfSubject:     self.nameOfSubjectCell?.textfield.textfield.text,
                                             gender: self.genderCell?.selectedOption,
                                             contact: self.contactCell?.textfield.textfield.text,
                                             religion: self.religionCell?.selectedOption,
                                             livingArrangement: self.livingCell?.selectedOption,
                                             educationStatus: self.educationCell?.selectedOption,
                                             martialStatus: self.maritialStatusCell?.selectedOption,
                                             occupation: self.occupationCell?.selectedOption)
        interactor?.validate(request: request)
    }
}

extension LoginViewController : RadioBoxGroupTableViewCellDelegate{
    func didAddOtherTextfieid(indexPath : IndexPath){
        tableview.refresh()
    }
    
    func didSelectOption(indexPath: IndexPath, option: String?) {
        guard let cellConfig = self.cellConfigs?[indexPath.row] else{
            return
        }
        var request : Login.Validate.Request?
        
        switch cellConfig.uiComponent {
        case .gender:
            request = Login.Validate.Request(gender: option)
        case .religion:
            request = Login.Validate.Request(religion: option)
        case .livingArrangement:
            request = Login.Validate.Request(livingArrangement: option)
        case .educationStatus:
            request = Login.Validate.Request(educationStatus: option)
        case .martialStatus:
            request = Login.Validate.Request(martialStatus: option)
        case .ocuupation:
            request = Login.Validate.Request(occupation: option)
        default:
            return
        }
        
        interactor?.validate(request: request!)
    }
}
